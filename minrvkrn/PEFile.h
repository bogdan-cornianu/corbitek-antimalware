#pragma once

#include "genericfile.h"

class PEFile :
	public GenericFile
{
public:
	PEFile(void);
	VOID  GatherDiskImageInformation( LPCWSTR szFilename, PVOID& pBaseAddress,
            DWORD& dwRawData, PVOID& pEntryPoint,
            PVOID& pCodeStart, SIZE_T& dwCodeSize, PVOID& pCodeEnd );

	VOID  DumpDiskImageInformation( PVOID pBaseAddress,
            DWORD dwRawData, PVOID pEntryPoint,
            PVOID pCodeStart, SIZE_T dwCodeSize, PVOID pCodeEnd );

	BOOL CalculateHash( HashTransformation& hash,
            PVOID pMessage, SIZE_T nMessageSize,
            PBYTE pcbHashBuffer, SIZE_T nHashBufferSize );

	wstring DumpHashInformation( HashTransformation& hash, PBYTE pcbDiskHash,
                          PBYTE pcbMemoryHash, SIZE_T nHashSize );

	wstring DumpHash( PBYTE pcbHash, SIZE_T nHashSize );
	LPCWSTR TextSectionMD5(void);
	BOOL Is64Bit();
	BOOL GetSectionHdrByName(char *szSection);
	wstring TextSectionSHA256(TCHAR* filename);
	DWORD GetCertificateInfo();
	BOOL MapFileRead(char *SearchStr);
	BOOL IsProtectedWinFile(TCHAR* filename);
	int IsSigned(TCHAR* filename);
	int GetMaliciousActivity(int heur_level);
	TCHAR* DBSearchGeneric(void);
    BOOL IsValidPEFile(void);
	DWORD CalculateChecksum();
	DWORD GetChecksum();
	BOOL OpenFile(TCHAR* filename);
	void CloseFile(void);
	BOOL IsOpen()	{ return m_hFile != 0; }
	~PEFile(void);
protected:
	HANDLE					hFile;
	HANDLE					hFileMapping;
	int						heur_sum;
	int						is_signed;
	SIZE_T					codesize;
	HANDLE					m_hFile;
	HANDLE					m_hFileMapping;
	BYTE *					m_pMappedFileBase;
	IMAGE_DOS_HEADER *		m_pDOSHeader;
	IMAGE_FILE_HEADER *		m_pImgFileHdr;
	IMAGE_NT_HEADERS *		m_pNTHeaders32;
	IMAGE_NT_HEADERS64 *	m_pNTHeaders64;
	IMAGE_SECTION_HEADER *  m_pNTSHeader;
};

